[1,["3erupdZ6FFR4ooKvCsy0ZS@6c48a","7dj5uJT9FMn6OrOOx83tfK@6c48a","ecR2cxUFBG3522OPRp2WO/","3erupdZ6FFR4ooKvCsy0ZS@f9941","7dj5uJT9FMn6OrOOx83tfK@f9941","d0MqyYBeFAkIi762QNy1/B@b47c0","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","75+hoVWa1E7oL3v2g6Jbb5"],["node","_textureSource","_spriteFrame","_cameraComponent","scene","_parent","_customMaterial","_envmapHDR","_envmapLDR","_effectAsset"],["cc.ImageAsset","cc.SpriteFrame","cc.TextureCube",["cc.Node",["_name","_layer","_id","_components","_children","_lpos","_parent"],0,9,2,5,1],["cc.Widget",["_alignFlags","_originalWidth","_originalHeight","node"],0,1],["cc.Sprite",["_sizeMode","node","_spriteFrame","_customMaterial","_color"],2,1,6,6,5],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.SceneAsset",["_name"],2],["cc.Node",["_name","_parent","_components","_lpos"],2,1,2,5],["cc.UITransform",["node","_contentSize"],3,1,5],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.Scene",["_name","_children","_globals"],2,2,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5,5],["cc.ShadowsInfo",["_shadowColor","_size"],3,5,5],["cc.SkyboxInfo",["_envmapHDR","_envmapLDR"],3,6,6],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["cc.Camera",["_projection","_priority","_orthoHeight","_far","_visibility","node","_color"],-2,1,5],["cc.Material",["_props","_states","_defines"],0]],[[9,0,1,1],[3,0,1,6,3,3],[4,0,1,2,3,4],[6,0,1,2,4],[7,0,2],[3,0,1,2,4,3,5,4],[8,0,1,2,3,2],[10,0,1,1],[4,0,3,2],[5,0,1,3,2,2],[5,0,1,4,2,2],[11,0,1,2,2],[12,0,1,2,3,4,1],[13,0,1,2,3,4,2],[14,0,1,1],[15,0,1,1],[16,1],[17,1],[18,0,1,2,3,4,5,6,6],[19,0,1,2,4]],[[[{"name":"bg","rect":{"x":0,"y":0,"width":1200,"height":1920},"offset":{"x":0,"y":0},"originalSize":{"width":1200,"height":1920},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[1],[0]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@e9a6d","back":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@40c10","left":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@8fd34","right":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@74afd","top":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@bb97f","bottom":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@7d38f"}]}],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[[3,"../glass_effect",[{"hash":314927029,"name":"../glass_effect|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Properties","stageFlags":16,"binding":1,"members":[{"name":"radius","type":13,"count":1},{"name":"rand","type":13,"count":1}],"defines":[]},{"name":"bgColors","stageFlags":16,"binding":2,"members":[{"name":"bgColor1","type":16,"count":1},{"name":"bgColor2","type":16,"count":1},{"name":"bgColor3","type":16,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"varyings":[{"name":"color","type":16,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"uv0","type":14,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec2 a_texCoord;\nlayout(location = 2) in vec4 a_color;\nlayout(location = 0) out vec4 color;\nlayout(location = 1) out vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  layout(set = 1, binding = 0) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(location = 0) in vec4 color;\nlayout(set = 1, binding = 1) uniform Properties {\n  float radius;\n  float rand;\n};\nlayout(set = 1, binding = 2) uniform bgColors{\n  vec4 bgColor1;\n  vec4 bgColor2;\n  vec4 bgColor3;\n};\n#if USE_TEXTURE\n  layout(location = 1) in vec2 uv0;\n  layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;\n#endif\n#if USE_TEXTURE\nvec2 circleMove(in vec2 p_point,in float p_rand){\n  if(p_rand<0.02)\n    return p_point+vec2(sin(cc_time.x+p_rand)*0.35,cos(cc_time.x+p_rand)*0.35);\n  else if (p_rand<1.02)\n    return p_point+vec2(cos(cc_time.x+p_rand)*0.25,cos(cc_time.x+p_rand)*0.25);\n  else if (p_rand<2.02)\n    return p_point+vec2(cos(cc_time.x+p_rand)*0.15,sin(cc_time.x+p_rand)*0.15);\n  else\n    return p_point+vec2(sin(cc_time.x+p_rand)*0.05,sin(cc_time.x+p_rand)*0.05);\n}\n vec4 circle(in vec2 v_uv0, in vec2 center, in float p_radius, in vec4 p_color){\n  vec3 beforeReturn=vec3(1,1,1);\n  float pct =distance(v_uv0,center)/p_radius;\n  float p_visible=step(pct,1.0);\n  pct=pct*step(pct,1.0);\n  pct=1.0-pct;\n  beforeReturn=vec3(pct)*p_visible;\n  vec4 returnData=vec4(beforeReturn,1.0);\n  returnData=returnData*(p_color/255.0);\n  return returnData;\n}\nvec4 gauss(sampler2D tex, vec2 uv, float radius) {\n  vec4 o = vec4(0);\n  o += texture(tex, uv + vec2(radius,radius));\n  o += texture(tex, uv + vec2(-radius,radius));\n  o += texture(tex, uv + vec2(-radius,-radius));\n  o += texture(tex, uv + vec2(radius,-radius));\n  return o * 0.25;\n}\n#endif\nvec4 frag () {\n  vec4 o = circle(uv0,circleMove(vec2(0.2,0.2),0.0),0.7,bgColor1);\n  o += circle(uv0,circleMove(vec2(0.8,0.5),rand),0.7,bgColor2);\n  o += circle(uv0,circleMove(vec2(0.3,0.8),rand*2.0),0.7,bgColor3);\n  #if USE_TEXTURE\n    o *= gauss(cc_spriteTexture, uv0, radius);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nin vec4 color;\nlayout(std140) uniform Properties {\n  float radius;\n  float rand;\n};\nlayout(std140) uniform bgColors{\n  vec4 bgColor1;\n  vec4 bgColor2;\n  vec4 bgColor3;\n};\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\n#if USE_TEXTURE\nvec2 circleMove(in vec2 p_point,in float p_rand){\n  if(p_rand<0.02)\n    return p_point+vec2(sin(cc_time.x+p_rand)*0.35,cos(cc_time.x+p_rand)*0.35);\n  else if (p_rand<1.02)\n    return p_point+vec2(cos(cc_time.x+p_rand)*0.25,cos(cc_time.x+p_rand)*0.25);\n  else if (p_rand<2.02)\n    return p_point+vec2(cos(cc_time.x+p_rand)*0.15,sin(cc_time.x+p_rand)*0.15);\n  else\n    return p_point+vec2(sin(cc_time.x+p_rand)*0.05,sin(cc_time.x+p_rand)*0.05);\n}\n vec4 circle(in vec2 v_uv0, in vec2 center, in float p_radius, in vec4 p_color){\n  vec3 beforeReturn=vec3(1,1,1);\n  float pct =distance(v_uv0,center)/p_radius;\n  float p_visible=step(pct,1.0);\n  pct=pct*step(pct,1.0);\n  pct=1.0-pct;\n  beforeReturn=vec3(pct)*p_visible;\n  vec4 returnData=vec4(beforeReturn,1.0);\n  returnData=returnData*(p_color/255.0);\n  return returnData;\n}\nvec4 gauss(sampler2D tex, vec2 uv, float radius) {\n  vec4 o = vec4(0);\n  o += texture(tex, uv + vec2(radius,radius));\n  o += texture(tex, uv + vec2(-radius,radius));\n  o += texture(tex, uv + vec2(-radius,-radius));\n  o += texture(tex, uv + vec2(radius,-radius));\n  return o * 0.25;\n}\n#endif\nvec4 frag () {\n  vec4 o = circle(uv0,circleMove(vec2(0.2,0.2),0.0),0.7,bgColor1);\n  o += circle(uv0,circleMove(vec2(0.8,0.5),rand),0.7,bgColor2);\n  o += circle(uv0,circleMove(vec2(0.3,0.8),rand*2.0),0.7,bgColor3);\n  #if USE_TEXTURE\n    o *= gauss(cc_spriteTexture, uv0, radius);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform highp vec4 cc_time;\nvarying vec4 color;\n  uniform float radius;\n  uniform float rand;\n   uniform vec4 bgColor1;\n   uniform vec4 bgColor2;\n   uniform vec4 bgColor3;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\n#if USE_TEXTURE\nvec2 circleMove(in vec2 p_point,in float p_rand){\n  if(p_rand<0.02)\n    return p_point+vec2(sin(cc_time.x+p_rand)*0.35,cos(cc_time.x+p_rand)*0.35);\n  else if (p_rand<1.02)\n    return p_point+vec2(cos(cc_time.x+p_rand)*0.25,cos(cc_time.x+p_rand)*0.25);\n  else if (p_rand<2.02)\n    return p_point+vec2(cos(cc_time.x+p_rand)*0.15,sin(cc_time.x+p_rand)*0.15);\n  else\n    return p_point+vec2(sin(cc_time.x+p_rand)*0.05,sin(cc_time.x+p_rand)*0.05);\n}\n vec4 circle(in vec2 v_uv0, in vec2 center, in float p_radius, in vec4 p_color){\n  vec3 beforeReturn=vec3(1,1,1);\n  float pct =distance(v_uv0,center)/p_radius;\n  float p_visible=step(pct,1.0);\n  pct=pct*step(pct,1.0);\n  pct=1.0-pct;\n  beforeReturn=vec3(pct)*p_visible;\n  vec4 returnData=vec4(beforeReturn,1.0);\n  returnData=returnData*(p_color/255.0);\n  return returnData;\n}\nvec4 gauss(sampler2D tex, vec2 uv, float radius) {\n  vec4 o = vec4(0);\n  o += texture2D(tex, uv + vec2(radius,radius));\n  o += texture2D(tex, uv + vec2(-radius,radius));\n  o += texture2D(tex, uv + vec2(-radius,-radius));\n  o += texture2D(tex, uv + vec2(radius,-radius));\n  return o * 0.25;\n}\n#endif\nvec4 frag () {\n  vec4 o = circle(uv0,circleMove(vec2(0.2,0.2),0.0),0.7,bgColor1);\n  o += circle(uv0,circleMove(vec2(0.8,0.5),rand),0.7,bgColor2);\n  o += circle(uv0,circleMove(vec2(0.3,0.8),rand*2.0),0.7,bgColor3);\n  #if USE_TEXTURE\n    o *= gauss(cc_spriteTexture, uv0, radius);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":49,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":45}},"defines":[{"name":"USE_LOCAL","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"IS_GRAY","type":"boolean","defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"../glass_effect|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"radius":{"type":13,"value":[0.01],"range":[0,0.5]},"rand":{"type":13,"value":[1],"range":[0,3]},"bgColor1":{"type":16,"value":[255,0,0,255],"editor":{"type":"color"}},"bgColor2":{"type":16,"value":[0,0,255,255],"editor":{"type":"color"}},"bgColor3":{"type":16,"value":[0,180,0,255],"editor":{"type":"color"}}}}]}]]],0,0,[],[],[]],[[{"name":"default_sprite_splash","rect":{"x":0,"y":0,"width":2,"height":2},"offset":{"x":0,"y":0},"originalSize":{"width":2,"height":2},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[1],[1]],[[[4,"main"],[5,"Canvas",33554432,"e2u7IUWdNGg4fNGJL+bonu",[-5,-6,-7],[[0,-1,[5,1920,1080]],[7,-3,-2],[8,45,-4]],[1,960,540,0]],[1,"bg_shader",33554432,1,[[0,-8,[5,1920,1080]],[9,0,-9,0,1],[2,45,1920,1080,-10]]],[1,"mask",33554432,1,[[0,-11,[5,1920,1080]],[10,0,-12,[4,2600468480],2],[2,45,1920,1080,-13]]],[11,"main",[1],[12,[13,0.5208,[2,0.242613,0.362617,0.798746,0.520833125],[2,0.241814,0.361945,0.798799,0],[2,0.519964,0.630786,0.905039,0.5208],[2,0.519544,0.630484,0.905069,0]],[14,[4,4283190348],[0,1024,1024]],[15,3,4],[16],[17]]],[6,"Camera",1,[-14],[1,0,0,1000]],[18,0,1073741824,689.5284159613059,2000,41943040,5,[4,0]]],0,[0,0,1,0,3,6,0,0,1,0,0,1,0,-1,5,0,-2,2,0,-3,3,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,0,3,0,-1,6,0,4,4,1,5,4,14],[0,0,0,0,0],[6,2,2,7,8],[2,3,4,5,6]],[[{"base":"2,2,0,0,2,0","rgbe":true,"mipmaps":[{"front":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@e9a6d","back":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@40c10","left":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@8fd34","right":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@74afd","top":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@bb97f","bottom":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@7d38f"}]}],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[[19,[{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}]]],0,0,[0],[9],[7]]]]
